/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ToolsImport } from './routes/tools'
import { Route as AboutImport } from './routes/about'
import { Route as ScenariosRouteImport } from './routes/scenarios/route'
import { Route as IndexImport } from './routes/index'
import { Route as ScenariosIndexImport } from './routes/scenarios/index'
import { Route as ScenariosV2gImport } from './routes/scenarios/v2g'
import { Route as ScenariosSmartChargingImport } from './routes/scenarios/smart-charging'
import { Route as ScenariosIntroImport } from './routes/scenarios/intro'
import { Route as ScenariosEvChargingImport } from './routes/scenarios/ev-charging'

// Create/Update Routes

const ToolsRoute = ToolsImport.update({
  id: '/tools',
  path: '/tools',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const ScenariosRouteRoute = ScenariosRouteImport.update({
  id: '/scenarios',
  path: '/scenarios',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ScenariosIndexRoute = ScenariosIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ScenariosRouteRoute,
} as any)

const ScenariosV2gRoute = ScenariosV2gImport.update({
  id: '/v2g',
  path: '/v2g',
  getParentRoute: () => ScenariosRouteRoute,
} as any)

const ScenariosSmartChargingRoute = ScenariosSmartChargingImport.update({
  id: '/smart-charging',
  path: '/smart-charging',
  getParentRoute: () => ScenariosRouteRoute,
} as any)

const ScenariosIntroRoute = ScenariosIntroImport.update({
  id: '/intro',
  path: '/intro',
  getParentRoute: () => ScenariosRouteRoute,
} as any)

const ScenariosEvChargingRoute = ScenariosEvChargingImport.update({
  id: '/ev-charging',
  path: '/ev-charging',
  getParentRoute: () => ScenariosRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/scenarios': {
      id: '/scenarios'
      path: '/scenarios'
      fullPath: '/scenarios'
      preLoaderRoute: typeof ScenariosRouteImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/tools': {
      id: '/tools'
      path: '/tools'
      fullPath: '/tools'
      preLoaderRoute: typeof ToolsImport
      parentRoute: typeof rootRoute
    }
    '/scenarios/ev-charging': {
      id: '/scenarios/ev-charging'
      path: '/ev-charging'
      fullPath: '/scenarios/ev-charging'
      preLoaderRoute: typeof ScenariosEvChargingImport
      parentRoute: typeof ScenariosRouteImport
    }
    '/scenarios/intro': {
      id: '/scenarios/intro'
      path: '/intro'
      fullPath: '/scenarios/intro'
      preLoaderRoute: typeof ScenariosIntroImport
      parentRoute: typeof ScenariosRouteImport
    }
    '/scenarios/smart-charging': {
      id: '/scenarios/smart-charging'
      path: '/smart-charging'
      fullPath: '/scenarios/smart-charging'
      preLoaderRoute: typeof ScenariosSmartChargingImport
      parentRoute: typeof ScenariosRouteImport
    }
    '/scenarios/v2g': {
      id: '/scenarios/v2g'
      path: '/v2g'
      fullPath: '/scenarios/v2g'
      preLoaderRoute: typeof ScenariosV2gImport
      parentRoute: typeof ScenariosRouteImport
    }
    '/scenarios/': {
      id: '/scenarios/'
      path: '/'
      fullPath: '/scenarios/'
      preLoaderRoute: typeof ScenariosIndexImport
      parentRoute: typeof ScenariosRouteImport
    }
  }
}

// Create and export the route tree

interface ScenariosRouteRouteChildren {
  ScenariosEvChargingRoute: typeof ScenariosEvChargingRoute
  ScenariosIntroRoute: typeof ScenariosIntroRoute
  ScenariosSmartChargingRoute: typeof ScenariosSmartChargingRoute
  ScenariosV2gRoute: typeof ScenariosV2gRoute
  ScenariosIndexRoute: typeof ScenariosIndexRoute
}

const ScenariosRouteRouteChildren: ScenariosRouteRouteChildren = {
  ScenariosEvChargingRoute: ScenariosEvChargingRoute,
  ScenariosIntroRoute: ScenariosIntroRoute,
  ScenariosSmartChargingRoute: ScenariosSmartChargingRoute,
  ScenariosV2gRoute: ScenariosV2gRoute,
  ScenariosIndexRoute: ScenariosIndexRoute,
}

const ScenariosRouteRouteWithChildren = ScenariosRouteRoute._addFileChildren(
  ScenariosRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/scenarios': typeof ScenariosRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/tools': typeof ToolsRoute
  '/scenarios/ev-charging': typeof ScenariosEvChargingRoute
  '/scenarios/intro': typeof ScenariosIntroRoute
  '/scenarios/smart-charging': typeof ScenariosSmartChargingRoute
  '/scenarios/v2g': typeof ScenariosV2gRoute
  '/scenarios/': typeof ScenariosIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/tools': typeof ToolsRoute
  '/scenarios/ev-charging': typeof ScenariosEvChargingRoute
  '/scenarios/intro': typeof ScenariosIntroRoute
  '/scenarios/smart-charging': typeof ScenariosSmartChargingRoute
  '/scenarios/v2g': typeof ScenariosV2gRoute
  '/scenarios': typeof ScenariosIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/scenarios': typeof ScenariosRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/tools': typeof ToolsRoute
  '/scenarios/ev-charging': typeof ScenariosEvChargingRoute
  '/scenarios/intro': typeof ScenariosIntroRoute
  '/scenarios/smart-charging': typeof ScenariosSmartChargingRoute
  '/scenarios/v2g': typeof ScenariosV2gRoute
  '/scenarios/': typeof ScenariosIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/scenarios'
    | '/about'
    | '/tools'
    | '/scenarios/ev-charging'
    | '/scenarios/intro'
    | '/scenarios/smart-charging'
    | '/scenarios/v2g'
    | '/scenarios/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/tools'
    | '/scenarios/ev-charging'
    | '/scenarios/intro'
    | '/scenarios/smart-charging'
    | '/scenarios/v2g'
    | '/scenarios'
  id:
    | '__root__'
    | '/'
    | '/scenarios'
    | '/about'
    | '/tools'
    | '/scenarios/ev-charging'
    | '/scenarios/intro'
    | '/scenarios/smart-charging'
    | '/scenarios/v2g'
    | '/scenarios/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ScenariosRouteRoute: typeof ScenariosRouteRouteWithChildren
  AboutRoute: typeof AboutRoute
  ToolsRoute: typeof ToolsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ScenariosRouteRoute: ScenariosRouteRouteWithChildren,
  AboutRoute: AboutRoute,
  ToolsRoute: ToolsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/scenarios",
        "/about",
        "/tools"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/scenarios": {
      "filePath": "scenarios/route.tsx",
      "children": [
        "/scenarios/ev-charging",
        "/scenarios/intro",
        "/scenarios/smart-charging",
        "/scenarios/v2g",
        "/scenarios/"
      ]
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/tools": {
      "filePath": "tools.tsx"
    },
    "/scenarios/ev-charging": {
      "filePath": "scenarios/ev-charging.tsx",
      "parent": "/scenarios"
    },
    "/scenarios/intro": {
      "filePath": "scenarios/intro.tsx",
      "parent": "/scenarios"
    },
    "/scenarios/smart-charging": {
      "filePath": "scenarios/smart-charging.tsx",
      "parent": "/scenarios"
    },
    "/scenarios/v2g": {
      "filePath": "scenarios/v2g.tsx",
      "parent": "/scenarios"
    },
    "/scenarios/": {
      "filePath": "scenarios/index.tsx",
      "parent": "/scenarios"
    }
  }
}
ROUTE_MANIFEST_END */
